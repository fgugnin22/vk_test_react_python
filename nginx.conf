events {
    use           epoll;
    worker_connections  128;
}

http {
    # server {
    #     listen 80;
    #     server_name example.com;  # Replace with your domain name

    #     # Redirect HTTP to HTTPS
    #     location / {
    #         return 301 https://$host$request_uri;
    #     }
    # }

    server {
        listen 0.0.0.0:80;
        # listen 443 ssl;
        # server_name example.com;  # Replace with your domain name

        # ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;  # Full certificate path
        # ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;  # Private key path
        # ssl_trusted_certificate /etc/letsencrypt/live/example.com/chain.pem;

        # # Improve SSL security (optional)
        # ssl_protocols TLSv1.2 TLSv1.3;
        # ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:EECDH+AESGCM:EECDH+AES256:TLS_AES_128_GCM_SHA256';
        # ssl_prefer_server_ciphers on;

        location / {
            try_files /dist/$uri $uri @django;  # First, try serving the file from ./dist
        }

        location /api/ {
            try_files $uri @django;
        }

        location @django {
            proxy_pass http://django:8000;  # Assuming Django is running on port 8000 inside the container
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}